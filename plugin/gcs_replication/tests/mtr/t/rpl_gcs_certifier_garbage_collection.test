############################################################
# WL#6833: GCS Replication: Read-set free Certification
#          Module (DBSM Snapshot Isolation)
#
# Scenario 4: Check that certifier garbage collector don't remove
#             needed certification info to detect conflicting
#             transactions.
#
# Verify Group Replication certifier garbage collection
# behavior when we have a slow applying member, that is,
# server 2 certifies transactions but is unable to apply
# remote transactions.
############################################################

--source include/have_debug.inc
--source include/have_gcs_replication_plugin.inc
--let $gcs_group_name= 8a94f357-aab4-11df-86ab-c80aa9422222
--source include/master-slave.inc

# Keep binary logs with only GTIDs from test.
--connection server1
SET SESSION sql_log_bin= 0;
--source include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
--connection server2
SET SESSION sql_log_bin= 0;
--source include/gtid_utils.inc
SET SESSION sql_log_bin= 1;


--echo
--echo ############################################################
--echo #  1. Execute two transactions on server 1 and wait until
--echo #     they are applied on all group members.
--connection server1
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo #  2. Stop server 2 GCS applier so that certified remote
--echo #     transactions are not applied.
--echo #     This will mimic a slow server.
--connection server2

--source include/stop_gcs_replication.inc
SET @server2_debug_saved= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,gcs_applier_do_not_start_sql_thread';
--source include/start_gcs_replication.inc


--echo
--echo ############################################################
--echo #  3. Commit a transaction (T1) on server 1, that will be
--echo #     certified on both members but only applied on server 1.
--connection server1

--let $assert_text= GTID_EXECUTED must contain first two transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED, "$gcs_group_name:1-2")
--source include/assert.inc

UPDATE t1 SET c1=2 WHERE c1=1;


--echo
--echo ############################################################
--echo #  4. Wait until server 2 receives and certifies T1.
--connection server2

--let $wait_condition= SELECT Last_Conflict_Free_Transaction = '8a94f357-aab4-11df-86ab-c80aa9422222:3' from performance_schema.replication_group_member_stats
--source include/wait_condition.inc
if (!$success)
{
  --echo Current connection: $CURRENT_CONNECTION
  --query_vertical SELECT * FROM performance_schema.replication_connection_status
  --query_vertical SELECT * FROM performance_schema.replication_group_members
  --die Timeout in wait_condition.inc
}


--echo
--echo ############################################################
--echo #  5. Wait for stable set propagation and certification info
--echo #     garbage collection.
--echo #     After garbage collection certification info will contain:
--echo #     WS: t1.c1=1 -> 8a94f357-aab4-11df-86ab-c80aa9422222:1-2
--echo #     WS: t1.c1=2 -> 8a94f357-aab4-11df-86ab-c80aa9422222:1-2
--connection server1
--let $wait_timeout= 65
--let $wait_condition= SELECT Transactions_committed_all_members<>"" FROM performance_schema.replication_group_member_stats
--source include/wait_condition.inc

--connection server1
--let $count_transactions_validating= query_get_value(SELECT Count_transactions_validating from performance_schema.replication_group_member_stats, Count_transactions_validating, 1)
--let $assert_text= 'Count_transactions_validating must be 2'
--let $assert_cond= $count_transactions_validating = 2
--source include/assert.inc

--let $transactions_committed_all_members= query_get_value(SELECT Transactions_committed_all_members from performance_schema.replication_group_member_stats, Transactions_committed_all_members, 1)
--let $assert_text= 'Transactions_committed_all_members must be equal to $gcs_group_name:1-2'
--let $assert_cond= GTID_IS_EQUAL("$transactions_committed_all_members", "$gcs_group_name:1-2")
--source include/assert.inc

--connection server2
--let $count_transactions_validating= query_get_value(SELECT Count_transactions_validating from performance_schema.replication_group_member_stats, Count_transactions_validating, 1)
--let $assert_text= 'Count_transactions_validating must be 2'
--let $assert_cond= $count_transactions_validating = 2
--source include/assert.inc

--let $transactions_committed_all_members= query_get_value(SELECT Transactions_committed_all_members from performance_schema.replication_group_member_stats, Transactions_committed_all_members, 1)
--let $assert_text= 'Transactions_committed_all_members must be equal to $gcs_group_name:1-2'
--let $assert_cond= GTID_IS_EQUAL("$transactions_committed_all_members", "$gcs_group_name:1-2")
--source include/assert.inc


--echo
--echo ############################################################
--echo #  6. Execute the same statement of T1 in server 2, now named T2.
--echo #     It must be aborted since it conflicts with T1, despite
--echo #     it is not yet applied on server 2. Snapshot of T2 is
--echo #     8a94f357-aab4-11df-86ab-c80aa9422222:1-2
--connection server2

--let $assert_text= GTID_EXECUTED must contain first two transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED, "$gcs_group_name:1-2")
--source include/assert.inc

--error ER_TRANSACTION_ROLLBACK_DURING_COMMIT
UPDATE t1 SET c1=2 WHERE c1=1;

--let $assert_text= 'There is a value 1 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc
--let $assert_text= 'There is no value 2 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 0
--source include/assert.inc


--echo
--echo ############################################################
--echo #  7. Start server 2 GCS applier so that certified remote
--echo #     transactions not applied.
--echo #     Wait until all group transactions are applied.
--connection server2

--source include/stop_gcs_replication.inc
SET @@GLOBAL.DEBUG= @server2_debug_saved;
--source include/start_gcs_replication.inc

--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo #  8. Execute a transaction on server 2 to verify that
--echo #     everything is OK.
--connection server2

--let $assert_text= GTID_EXECUTED must contain all group transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED, "$gcs_group_name:1-3")
--source include/assert.inc

UPDATE t1 SET c1=3 WHERE c1=2;

--source include/rpl_sync.inc


--echo ############################################################
--echo #  9. Check that GTID_EXECUTED on server 1 contains all
--echo #     transactions.
--echo #     Also check that data is on tables.
--connection server1

--let $assert_text= GTID_EXECUTED must contain all committed GTIDs
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED, "$gcs_group_name:1-4")
--source include/assert.inc

--let $assert_text= 'There is a value 3 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 1
--source include/assert.inc


--echo ############################################################
--echo #  10. Check that GTID_EXECUTED on server 1 contains all
--echo #     transactions.
--echo #     Also check that data is on tables.
--connection server2

--let $assert_text= GTID_EXECUTED must contain all committed GTIDs
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED, "$gcs_group_name:1-4")
--source include/assert.inc

--let $assert_text= 'There is a value 3 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 8. Shutdown.
DROP TABLE t1;

--connection server1
SET SESSION sql_log_bin= 0;
--source include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
--connection server2
SET SESSION sql_log_bin= 0;
--source include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;

--source include/rpl_end.inc
