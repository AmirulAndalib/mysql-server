############################################################
# Verify server behaviour when a transaction is negatively
# certified.
############################################################
--source include/have_debug.inc
--source include/have_gcs_replication_plugin.inc

--let $gcs_group_name= 8a94f357-aab4-11df-86ab-c80aa9429123
--source include/master-slave.inc

--echo ############################################################
--echo # 1. Execute some transactions on server1.
--connection server1

--let $gcs_number_of_nodes= 2
--source include/rpl_gcs_wait_for_number_of_nodes.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--let $sync_slave_connection= server2
--source include/sync_slave_sql_with_master.inc

--echo
--echo ############################################################
--echo # 2. Force negative certification outcome of the next
--echo #    transaction.
--connection server1
SET @@GLOBAL.DEBUG= @debug_saved;
SET @@GLOBAL.DEBUG= '+d,gcs_force_1_negative_certification';
--connection server2
SET @@GLOBAL.DEBUG= @debug_saved;
SET @@GLOBAL.DEBUG= '+d,gcs_force_1_negative_certification';

--echo
--echo ############################################################
--echo # 3. First insert must be aborted.
--connection server1
--error ER_ERROR_DURING_COMMIT
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);

--let $sync_slave_connection= server2
--source include/sync_slave_sql_with_master.inc

--connection server1
--let $assert_text= 'There is no value 2 in table t1 on server 1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is a value 3 in table t1 on server 1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 1
--source include/assert.inc

--let $transaction_in_queue= query_get_value(SELECT Count_Transactions_in_queue FROM performance_schema.replication_group_member_stats, Count_Transactions_in_queue, 1)
--let $assert_text= 'The value of Count_Transactions_in_queue should be 0 on server 1'
--let $assert_cond= $transaction_in_queue = 0
--source include/assert.inc
--let $certified_transactions= query_get_value(SELECT Count_transactions_checked FROM performance_schema.replication_group_member_stats, Count_transactions_checked, 1)
--let $assert_text= 'The value of Count_transactions_checked should be 4 on server 1'
--let $assert_cond= $certified_transactions = 4
--source include/assert.inc
--let $negatively_certified= query_get_value(SELECT Count_conflicts_detected FROM performance_schema.replication_group_member_stats, Count_conflicts_detected, 1)
--let $assert_text= 'The value of Count_conflicts_detected should be 1 on server 1'
--let $assert_cond= $negatively_certified = 1
--source include/assert.inc
--let $last_certified_transaction= query_get_value(SELECT Last_conflict_free_transaction from performance_schema.replication_group_member_stats, Last_conflict_free_transaction, 1)
--let $assert_text= 'The value of Last_conflict_free_transaction should be 8a94f357-aab4-11df-86ab-c80aa9429123:3 on server 1'
--let $assert_cond= "$last_certified_transaction" = "$gcs_group_name:3"
--source include/assert.inc

--connection server2
--let $assert_text= 'There is no value 2 in table t1 on server 2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is a value 3 in table t1 on server 2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 1
--source include/assert.inc

--let $transaction_in_queue= query_get_value(SELECT Count_Transactions_in_queue FROM performance_schema.replication_group_member_stats, Count_Transactions_in_queue, 1)
--let $assert_text= 'The value of Count_Transactions_in_queue should be 0 on server 2'
--let $assert_cond= $transaction_in_queue = 0
--source include/assert.inc
--let $certified_transactions= query_get_value(SELECT Count_transactions_checked FROM performance_schema.replication_group_member_stats, Count_transactions_checked, 1)
--let $assert_text= 'The value of Count_transactions_checked should be 4 on server 2'
--let $assert_cond= $certified_transactions = 4
--source include/assert.inc
--let $negatively_certified= query_get_value(SELECT Count_conflicts_detected FROM performance_schema.replication_group_member_stats, Count_conflicts_detected, 1)
--let $assert_text= 'The value of Count_conflicts_detected should be 1 on server 2'
--let $assert_cond= $negatively_certified = 1
--source include/assert.inc
--let $last_certified_transaction= query_get_value(SELECT Last_conflict_free_transaction from performance_schema.replication_group_member_stats, Last_conflict_free_transaction, 1)
--let $assert_text= 'The value of Last_conflict_free_transaction should be 8a94f357-aab4-11df-86ab-c80aa9429123:3 on server 2'
--let $assert_cond= "$last_certified_transaction" = "$gcs_group_name:3"
--source include/assert.inc

--echo
--echo ############################################################
--echo # 4. Clean debug flag on MTR side.
--connection server1
SET @@GLOBAL.DEBUG= @debug_saved;
--connection server2
SET @@GLOBAL.DEBUG= @debug_saved;

--echo
--echo ############################################################
--echo # 5. Shutdown.
--connection server1
DROP TABLE t1;

--let $sync_slave_connection= server2
--source include/sync_slave_sql_with_master.inc

--connection server1
--let $assert_text= 'Aborted transaction should not have increased GNO to 5 on server 1'
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$gcs_group_name:1-4"
--source include/assert.inc

--connection server2
--let $assert_text= 'Aborted transaction should not have increased GNO to 5 on server 2'
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$gcs_group_name:1-4"
--source include/assert.inc

--source include/rpl_end.inc
