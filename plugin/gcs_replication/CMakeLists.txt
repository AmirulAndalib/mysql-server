# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
  SET(LIBCPG_PATH /usr/lib/corosync /usr/lib64/corosync /usr/local/lib /usr/local/lib64 CACHE STRING "Default locations for libcpg (cluster library)" )

  CHECK_INCLUDE_FILES(corosync/cpg.h HAVE_COROSYNC_CPG_H)

  IF (NOT HAVE_COROSYNC_CPG_H)
    MESSAGE(STATUS
            "Skipping GCS replication plugin due to Corosync headers not found.")
    RETURN()
  ENDIF (NOT HAVE_COROSYNC_CPG_H)

  find_library(LIBCPG cpg ${LIBCPG_PATH})
  find_library(LIBPTHREAD pthread ${LIBPTHREAD_PATH})
  if (LIBCPG)
    CHECK_LIBRARY_EXISTS (${LIBCPG} cpg_local_get "" HAVE_LIBCPG)
    CHECK_INCLUDE_FILES (corosync/cpg.h HAVE_COROSYNC_CPG_H)
  endif (LIBCPG)

  INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/plugin/gcs_replication/include)
  INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/plugin/gcs_replication/gcs/interface)
  INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/plugin/gcs_replication/gcs/bindings/corosync)
  SET(GCS_SOURCES
    gcs_plugin.cc gcs_plugin.h
    gcs_member_info.cc gcs_member_info.h
    gcs_binding_factory.cc gcs_binding_factory.h
    gcs_plugin_utils.h
    observer_server_actions.cc observer_server_actions.h
    observer_server_state.cc observer_server_state.h
    observer_trans.cc observer_trans.h
    gcs_plugin_messages.cc gcs_plugin_messages.h
    gcs_certifier.cc gcs_certifier.h
    gcs_event_handlers.cc gcs_event_handlers.h
    pipeline_factory.h pipeline_factory.cc
    gcs_replication_threads_api.h gcs_replication_threads_api.cc
    gcs_applier.h gcs_applier.cc
    gcs_recovery_message.cc gcs_recovery_message.h
    gcs_recovery.cc gcs_recovery.h
    gcs_certifier_stats_interface.h
    handlers/gcs_pipeline_interface.h
    handlers/certification_handler.h
    handlers/certification_handler.cc
    handlers/event_cataloger.h
    handlers/event_cataloger.cc
    handlers/applier_sql_thread.h
    handlers/applier_sql_thread.cc
  )

  ADD_LIBRARY(gcs_unit_test_resource STATIC  gcs_member_info.cc)

  ADD_LIBRARY(gcs_interface STATIC  gcs/interface/gcs_group_identifier.cc
                                    gcs/interface/gcs_member_identifier.cc
                                    gcs/interface/gcs_message.cc
                                    gcs/interface/gcs_view.cc
                                    gcs/interface/gcs_view_identifier.cc)


  ADD_LIBRARY(gcs_corosync STATIC gcs/bindings/corosync/gcs_state_exchange.cc
                                  gcs/bindings/corosync/gcs_state_exchange.h
                                  gcs/bindings/corosync/gcs_corosync_communication_interface.cc
                                  gcs/bindings/corosync/gcs_corosync_communication_interface.h
                                  gcs/bindings/corosync/gcs_corosync_control_interface.cc
                                  gcs/bindings/corosync/gcs_corosync_control_interface.h
                                  gcs/bindings/corosync/gcs_corosync_interface.cc
                                  gcs/bindings/corosync/gcs_corosync_interface.h
                                  gcs/bindings/corosync/gcs_corosync_statistics_interface.cc
                                  gcs/bindings/corosync/gcs_corosync_statistics_interface.h
                                  gcs/bindings/corosync/gcs_corosync_utils.cc
                                  gcs/bindings/corosync/gcs_corosync_utils.h)

  MYSQL_ADD_PLUGIN(gcs_replication ${GCS_SOURCES}
                   MODULE_ONLY MODULE_OUTPUT_NAME "gcs_replication_plugin")


  if (LIBCPG)
    TARGET_LINK_LIBRARIES(gcs_corosync gcs_interface ${LIBCPG} ${LIBPTHREAD} )
    TARGET_LINK_LIBRARIES(gcs_replication gcs_interface gcs_corosync)
  endif(LIBCPG)

endif(CMAKE_SYSTEM_NAME MATCHES "Linux")
