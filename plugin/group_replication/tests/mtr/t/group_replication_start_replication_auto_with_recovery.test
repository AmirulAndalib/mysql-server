# This test verifies that recovery connection options work properly when the
# server restarts.
# Placing the connection credentials in server2 options file, upon start we
# verify that even if group replication was not started, the password is not
# readable.
# Placing the connection credentials in server1 options file, and setting the
# start on boot option to 1, when the server is restarted we verify that group
# replication is running fine and the password is not readable.

--source include/have_group_replication_plugin.inc
--let $group_replication_group_name= 9f54ea80-c7e8-11e4-8830-0800200c9a66c

#Connection options (Update the options file if changed)
--let $recovery_user= recovery_user
--let $recovery_password= recovery_password

--echo #
--echo # On server 1 stop group replication that started at boot
--echo #

--connection server1
--source include/stop_group_replication.inc

--echo #
--echo # On server 2 before start, the recovery pass should be empty
--echo #

--connection server2

--let $assert_text= The value of the recovery user name should be $recovery_user
--let $assert_cond= "[SELECT @@group_replication_recovery_user]" = "$recovery_user"
--source include/assert.inc

--let $assert_text= The value of the recovery password should be empty
--let $assert_cond= "[SELECT @@group_replication_recovery_password]" = ""
--source include/assert.inc

--echo #
--echo # On server 2 start group replication and create a replication user
--echo #

--eval CREATE USER "$recovery_user" IDENTIFIED BY "$recovery_password"
--eval GRANT REPLICATION SLAVE ON *.* TO "$recovery_user"
FLUSH PRIVILEGES;
--source include/start_group_replication.inc

#insert some data
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--echo #
--echo # On server 1 start group replication using the recovery user
--echo #

--connection server1
--eval SET GLOBAL group_replication_recovery_user= $recovery_user
--eval SET GLOBAL group_replication_recovery_password= $recovery_password
--source include/start_group_replication.inc

--let $assert_text= The value of the recovery user name should be $recovery_user
--let $assert_cond= "[SELECT @@group_replication_recovery_user]" = "$recovery_user"
--source include/assert.inc

--let $assert_text= The value of the recovery password should be empty
--let $assert_cond= "[SELECT @@group_replication_recovery_password]" = ""
--source include/assert.inc

--echo #
--echo # On server 1 restart the server. Group replication should start at boot
--echo #

--source include/restart_mysqld.inc

--let $group_replication_member_state= ONLINE
--source ../inc/group_replication_wait_for_member_state.inc

--echo #
--echo # On server 1 after restart, the recovery pass should be empty
--echo #

--let $assert_text= The value of the recovery user name should be $recovery_user
--let $assert_cond= "[SELECT @@group_replication_recovery_user]" = "$recovery_user"
--source include/assert.inc

--let $assert_text= The value of the recovery password should be empty
--let $assert_cond= "[SELECT @@group_replication_recovery_password]" = ""
--source include/assert.inc

INSERT INTO t1 VALUES (2);

--connection server2

--let $wait_condition= SELECT count(*)=2 FROM t1;
--source include/wait_condition.inc

if (!$success)
{
  --die Timeout in wait_condition.inc
}

--echo #
--echo # Cleanup
--echo #

--connection server1

--eval DROP USER "$recovery_user"
DROP TABLE t1;

--connection server2

--let $wait_condition= SELECT count(*)=0 FROM information_schema.tables WHERE table_name = "t1";
--source include/wait_condition.inc

--source include/stop_group_replication.inc

RESET SLAVE ALL FOR CHANNEL "group_replication_applier";
RESET MASTER;

--connection server1

--source include/stop_group_replication.inc

RESET SLAVE ALL FOR CHANNEL "group_replication_applier";
RESET MASTER;
