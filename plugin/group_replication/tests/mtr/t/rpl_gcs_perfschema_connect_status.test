# WL#6841 - GCS Replication: P_S table to show GCS kernel stats

# This test checks the basic functionality of the GCS replication
# P_S for replication_connection_status table.
# DDL and DML testing for this table is addressed in other tests.
#
# The follwing scenarios are tested:
#
#  - Test each field on a fresh gcs replication setup.
#  - Cause group_name to reset if mysql server restarted.
#  - Verify that the fileds are not preserved when plugin is uninstalled.

--source include/have_group_replication_plugin.inc

--let $group_replication_group_name= 8a94f356-aab3-11de-86aa-b80aa9429561

--connection server1
# This is a valid name being given to the group name
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"

# Checking the performance Schema output for the replication_connection_status table.
# Channel only exists after start Group Replication.
--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_connection_status, Group_Name, 1)
--let $assert_text= The value of group name should be $group_replication_group_name
--let $assert_cond= "$group_name" = "No such row"
--source include/assert.inc

--let $service_state= query_get_value(SELECT Service_state from performance_schema.replication_connection_status, Service_state, 1)
--let $assert_text= The value of service state before GCS start should be OFF
--let $assert_cond= "$service_state" = "No such row"
--source include/assert.inc

# Start GCS replication
--source include/start_group_replication.inc

--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_connection_status, Group_Name, 1)
--let $assert_text= The value of group name should be $group_replication_group_name
--let $assert_cond= "$group_name" = "$group_replication_group_name"
--source include/assert.inc

--let $service_state= query_get_value(SELECT Service_state from performance_schema.replication_connection_status, Service_state, 1)
--let $assert_text= The value of service state before GCS start should be ON
--let $assert_cond= "$service_state" = "ON"
--source include/assert.inc

# Stop GCS replication
--source include/stop_group_replication.inc

--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_connection_status, Group_Name, 1)

--let $assert_text= The value of group name should be $group_replication_group_name
--let $assert_cond= "$group_name" = "$group_replication_group_name"
--source include/assert.inc

--let $service_state= query_get_value(SELECT Service_state from performance_schema.replication_connection_status, Service_state, 1)
--let $assert_text= The value of service state before GCS start should be OFF again
--let $assert_cond= "$service_state" = "OFF"
--source include/assert.inc

# This restart tests that the plugin is still loaded on the server restart
--source include/restart_mysqld.inc

# After the server restart the group name is again set to NULL
--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_connection_status, Group_Name, 1)

--let $assert_text= The value of group name should be NULL
--let $assert_cond= "$group_Name"= ""
--source include/assert.inc

--let $source_uuid= query_get_value(SELECT Source_Uuid from performance_schema.replication_connection_status, Source_Uuid, 1)

--let $assert_text= The value of source_uuid should be NULL
--let $assert_cond= "$source_uuid"= ""
--source include/assert.inc
