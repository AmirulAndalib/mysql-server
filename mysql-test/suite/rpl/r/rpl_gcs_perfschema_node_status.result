include/have_gcs_replication_plugin.inc
server1
SET GLOBAL gcs_replication_plugin_group_name= "8a84f397-aaa4-18df-89ab-c70aa9823561";
###################
Test start values
###################
include/assert.inc [The value of group name should be 8a84f397-aaa4-18df-89ab-c70aa9823561]
include/assert.inc [The value of node_id should be empty before starting gcs]
include/assert.inc [The value of Transactions_in_queue should be 0 before starting gcs]
include/assert.inc [The value of Certified_transactions should be 0 before starting gcs]
include/assert.inc [The value of Positively_certified should be 0 before starting gcs]
include/assert.inc [The value of Negatively_certified should be 0 before starting gcs]
include/assert.inc [The value of Certification_db_size should be 0 before starting gcs]
include/assert.inc [The value of Stable_set should be empty before starting gcs]
include/assert.inc [The value of Last_certified_transaction should be 0 before starting gcs]
include/assert.inc [The value of Applier_module_status should be OFF before starting gcs]
########################################################
Values being updated after executing some transactions
########################################################
include/start_gcs_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);
INSERT INTO t1 values (4);
server2
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,recovery_thread_wait';
SET GLOBAL gcs_replication_plugin_group_name= "8a84f397-aaa4-18df-89ab-c70aa9823561";
START GCS_REPLICATION;
include/rpl_gcs_wait_for_node_state.inc
# Apply some transactions on the first node so that the queue of the second node is not empty.
server1
INSERT INTO t1 VALUES (5);
INSERT INTO t1 VALUES (6);
# Check for the transaction in the applier queue and then unblock the recovery.
server2
[ The value of Transactions_in_queue should be 2 when the applier has not processed the transaction queue ]
SET @@GLOBAL.DEBUG= @debug_save;
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";
include/rpl_gcs_wait_for_node_state.inc
server1
include/assert.inc [The value of group name should be 8a84f397-aaa4-18df-89ab-c70aa9823561]
include/assert.inc [The value of node_id should be equal to server UUID after starting gcs]
include/assert.inc [The value of Certified_transactions should be 6 after starting gcs]
include/assert.inc [The value of Positively_certified should be 6 after starting gcs]
include/assert.inc [The value of Negatively_certified should be 0 after starting gcs]
include/assert.inc [The value of Certification_db_size should be 5 after starting gcs]
include/assert.inc [The value of Stable_set should be empty currently for the gcs]
include/assert.inc [The value of Last_certified_transaction should be the gtid of the last applied transaction.]
include/assert.inc [The value of Applier_module_status should be ON after starting gcs]
DROP TABLE t1;
####################################
The values being checked after stop
####################################
include/stop_gcs_replication.inc
include/assert.inc [The value of group name should be 8a84f397-aaa4-18df-89ab-c70aa9823561]
# restart
include/assert.inc [The value of group name should be NULL]
include/assert.inc [The value of Applier_module_status should be OFF before starting gcs]
include/stop_gcs_replication.inc
