include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]

############################################################
# 1. Create a table on server1.
[connection server1]
CREATE TABLE t1 (c1 INT PRIMARY KEY);
CREATE TABLE t2 (c2 INT PRIMARY KEY, FOREIGN KEY (c2) REFERENCES t1(c1));
INSERT INTO t1 VALUES(1);
include/rpl_sync.inc

############################################################
# 2. Set a debug sync before broadcast message to group on
#    connection server_1.
#    Commit a transaction that will be block before broadcast.
[connection server_1]
SET DEBUG_SYNC='gcs_before_message_broadcast WAIT_FOR waiting';
BEGIN;
INSERT INTO t2 VALUES (1);
COMMIT;

############################################################
# 3. Wait until server_1 connection reaches the
# gcs_before_message_broadcast debug sync point.
[connection server1]

############################################################
# 4. Execute a transaction on server2, that will reach first
#    certification, since server_1 is blocked before broadcast.
[connection server2]
UPDATE t1 SET c1=2 WHERE c1=1;
include/sync_slave_sql_with_master.inc

############################################################
# 5. Signal the waiting thread on server_1 to resume.
[connection server1]
SET DEBUG_SYNC='now SIGNAL waiting';

############################################################
# 6. It will end up in an error stating that it was aborted,
#    since transactions are conflicting and server2 was
#    ordered first.
[connection server_1]
Got one of the listed errors

############################################################
# 7. Assert that number of certified transactions are the
#    expected ones.
[connection server1]
include/assert.inc [The value of Certified_transactions should be 5 after starting gcs]
include/assert.inc [The value of Positively_certified should be 4 after starting gcs]
include/assert.inc [The value of Negatively_certified should be 1 after starting gcs]

############################################################
# Checking the positive case in which there is no conflict.
############################################################

INSERT INTO t1 VALUES (5);
############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection server_1.
#    Commit a transaction that will be block before broadcast.
[connection server_1]
SET DEBUG_SYNC='gcs_before_message_broadcast WAIT_FOR waiting';
BEGIN;
INSERT INTO t2 VALUES (5);
COMMIT;

############################################################
# 2. Wait until server_1 connection reaches the
# gcs_before_message_broadcast debug sync point.
[connection server1]

############################################################
# 3. Execute a transaction on server2, that will reach first
#    certification, since server_1 is blocked before broadcast.
[connection server2]
UPDATE t1 SET c1=6 WHERE c1=2;
include/sync_slave_sql_with_master.inc

############################################################
# 4. Signal the waiting thread on server_1 to resume.
[connection server1]
SET DEBUG_SYNC='now SIGNAL waiting';

########################################################################
# 5. It will execute without error as the conflicting transactions have
#    been removed.
[connection server_1]
include/rpl_sync.inc

############################################################
# 6. Assert that number of certified transactions are the
#    expected ones.
[connection server1]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t2 will contain 1 rows after the above execution]
include/assert.inc [Table t1 will contain 2 rows after the above execution]
include/assert.inc [The value of Certified_transactions should be 8 after starting gcs]
include/assert.inc [The value of Positively_certified should be 7 after starting gcs]
include/assert.inc [The value of Negatively_certified should be 1 after starting gcs]

############################################################
# Clean up.
DROP TABLE t2;
DROP TABLE t1;
include/rpl_end.inc
