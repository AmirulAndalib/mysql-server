# WL#6839 - GCS Replication: P_S table to show DBSM stats

# This test checks the basic functionality of the GCS replication
# P_S for replication_node_status table.

--source include/have_log_bin.inc
--source include/have_gcs_replication_plugin.inc

--echo ###################
--echo Cleanup and server setup
--echo ###################

--let $gcs_group_name= 8a84f397-aaa4-18df-89ab-c70aa9823561

#Restart the first server to erase remains of old rounds
--connection server1
--source include/restart_mysqld.inc

#Reset the servers to delete data from previous rounds
--connection server2
--echo server2
RESET MASTER;

--connection server1
--echo server1
RESET MASTER;

--connection server1
--echo server1

# This is a valid name being given to the group name
--eval SET GLOBAL gcs_replication_plugin_group_name= "$gcs_group_name"

--echo ###################
--echo Test start values
--echo ###################

# Checking the performance Schema output for the replication_connection_nodes table.
--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_node_status, Group_Name, 1)

--let $assert_text= The value of group name should be $gcs_group_name
--let $assert_cond= "$group_name" = "$gcs_group_name"
--source include/assert.inc

--let $node_id= query_get_value(SELECT Node_Id from performance_schema.replication_node_status, Node_Id, 1)
--let $assert_text= The value of node_id should be empty before starting gcs
--let $assert_cond= "$node_id" = ""
--source include/assert.inc

--let $transaction_in_queue= query_get_value(SELECT Transactions_in_queue from performance_schema.replication_node_status, Transactions_in_queue, 1)
--let $assert_text= The value of Transactions_in_queue should be 0 before starting gcs
--let $assert_cond= "$transaction_in_queue" = 0
--source include/assert.inc

--let $certified_transactions= query_get_value(SELECT Certified_transactions from performance_schema.replication_node_status, Certified_transactions, 1)
--let $assert_text= The value of Certified_transactions should be 0 before starting gcs
--let $assert_cond= "$certified_transactions" = 0
--source include/assert.inc

--let $positively_certified= query_get_value(SELECT Positively_certified from performance_schema.replication_node_status, Positively_certified, 1)
--let $assert_text= The value of Positively_certified should be 0 before starting gcs
--let $assert_cond= "$positively_certified" = 0
--source include/assert.inc

--let $negatively_certified= query_get_value(SELECT Negatively_certified from performance_schema.replication_node_status, Negatively_certified, 1)
--let $assert_text= The value of Negatively_certified should be 0 before starting gcs
--let $assert_cond= "$negatively_certified" = 0
--source include/assert.inc

--let $certification_db_size= query_get_value(SELECT Certification_db_size from performance_schema.replication_node_status, Certification_db_size, 1)
--let $assert_text= The value of Certification_db_size should be 0 before starting gcs
--let $assert_cond= "$certification_db_size" = 0
--source include/assert.inc

--let $stable_set= query_get_value(SELECT Stable_set from performance_schema.replication_node_status, Stable_set, 1)
--let $assert_text= The value of Stable_set should be empty before starting gcs
--let $assert_cond= "$stable_set" = 0
--source include/assert.inc

--let $last_certified_transaction= query_get_value(SELECT Last_certified_transaction from performance_schema.replication_node_status, Last_certified_transaction, 1)
--let $assert_text= The value of Last_certified_transaction should be 0 before starting gcs
--let $assert_cond= "$last_certified_transaction" = ""
--source include/assert.inc

--let $applier_module_status= query_get_value(SELECT Applier_module_status from performance_schema.replication_node_status, Applier_module_status, 1)
--let $assert_text= The value of Applier_module_status should be OFF before starting gcs
--let $assert_cond= "$applier_module_status" = "OFF"
--source include/assert.inc


--echo ########################################################
--echo Values being updated after executing some transactions
--echo ########################################################

# Start GCS replication
--source include/start_gcs_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);
INSERT INTO t1 values (4);

--connection server2
--echo server2

SET @debug_save= @@GLOBAL.DEBUG;

SET @@GLOBAL.DEBUG='d,recovery_thread_wait';
SET GLOBAL gcs_replication_plugin_group_name= "8a84f397-aaa4-18df-89ab-c70aa9823561";
START GCS_REPLICATION;

--let $gcs_node_state= RECOVERING
--source include/rpl_gcs_wait_for_node_state.inc

--echo # Apply some transactions on the first node so that the queue of the second node is not empty.
--connection server1
--echo server1

INSERT INTO t1 VALUES (5);
INSERT INTO t1 VALUES (6);

--echo # Check for the transaction in the applier queue and then unblock the recovery.
--connection server2
--echo server2

--let $wait_condition= SELECT Transactions_in_queue = 2 from performance_schema.replication_node_status;
--source include/wait_condition.inc
--echo [ The value of Transactions_in_queue should be 2 when the applier has not processed the transaction queue ]

SET @@GLOBAL.DEBUG= @debug_save;
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";

--let $gcs_node_state= ONLINE
--source include/rpl_gcs_wait_for_node_state.inc

--connection server1
--echo server1

--let $assert_text= The value of group name should be $gcs_group_name
--let $assert_cond= "$group_name" = "$gcs_group_name"
--source include/assert.inc

--let $server_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $node_id= query_get_value(SELECT Node_Id from performance_schema.replication_node_status, Node_Id, 1)
--let $assert_text= The value of node_id should be equal to server UUID after starting gcs
--let $assert_cond= "$node_id" = "$server_uuid"
--source include/assert.inc

--let $certified_transactions= query_get_value(SELECT Certified_transactions from performance_schema.replication_node_status, Certified_transactions, 1)
--let $assert_text= The value of Certified_transactions should be 6 after starting gcs
--let $assert_cond= "$certified_transactions" = 6
--source include/assert.inc

--let $positively_certified= query_get_value(SELECT Positively_certified from performance_schema.replication_node_status, Positively_certified, 1)
--let $assert_text= The value of Positively_certified should be 6 after starting gcs
--let $assert_cond= "$positively_certified" = 6
--source include/assert.inc

--let $negatively_certified= query_get_value(SELECT Negatively_certified from performance_schema.replication_node_status, Negatively_certified, 1)
--let $assert_text= The value of Negatively_certified should be 0 after starting gcs
--let $assert_cond= "$negatively_certified" = 0
--source include/assert.inc

--let $certification_db_size= query_get_value(SELECT Certification_db_size from performance_schema.replication_node_status, Certification_db_size, 1)
--let $assert_text= The value of Certification_db_size should be 5 after starting gcs
--let $assert_cond= "$certification_db_size" = 5
--source include/assert.inc

--let $stable_set= query_get_value(SELECT Stable_set from performance_schema.replication_node_status, Stable_set, 1)
--let $assert_text= The value of Stable_set should be empty currently for the gcs
--let $assert_cond= "$stable_set" = 0
--source include/assert.inc

--let $last_certified_transaction= query_get_value(SELECT Last_certified_transaction from performance_schema.replication_node_status, Last_certified_transaction, 1)
--let $assert_text= The value of Last_certified_transaction should be the gtid of the last applied transaction.
--let $assert_cond= "$last_certified_transaction" = "8a84f397-aaa4-18df-89ab-c70aa9823561:6"
--source include/assert.inc

--let $applier_module_status= query_get_value(SELECT Applier_module_status from performance_schema.replication_node_status, Applier_module_status, 1)
--let $assert_text= The value of Applier_module_status should be ON after starting gcs
--let $assert_cond= "$applier_module_status" = "ON"
--source include/assert.inc

#After a minute, the stable set should be updated
--sleep 60

--let $wait_condition= SELECT stable_set = "8a84f397-aaa4-18df-89ab-c70aa9823561:1-6" from performance_schema.replication_node_status;
--source include/wait_condition.inc
--echo [ The value of stable_set should be equal to the node GTID executed set ]

--connection server1
DROP TABLE t1;

--echo ####################################
--echo The values being checked after stop
--echo ####################################

# Stop GCS replication
--source include/stop_gcs_replication.inc

--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_node_status, Group_Name, 1)
--let $assert_text= The value of group name should be $gcs_group_name
--let $assert_cond= "$group_name" = "$gcs_group_name"
--source include/assert.inc

# This restart tests that the plugin is still loaded on the server restart
--source include/restart_mysqld.inc

# After the server restart the group name is again set to NULL
--let $group_name= query_get_value(SELECT Group_Name from performance_schema.replication_node_status, Group_Name, 1)
--let $assert_text= The value of group name should be NULL
--let $assert_cond= "$group_name" = ""
--source include/assert.inc

--let $applier_module_status= query_get_value(SELECT Applier_module_status from performance_schema.replication_node_status, Applier_module_status, 1)
--let $assert_text= The value of Applier_module_status should be OFF before starting gcs
--let $assert_cond= "$applier_module_status" = "OFF"
--source include/assert.inc

--connection server2
--source include/stop_gcs_replication.inc
