############################################################
# Verify server behaviour when a before_commit listener
# returns a error.
############################################################
--source include/have_debug.inc
--source include/have_gcs_replication_plugin.inc

--let $gcs_group_name= 8a94f357-aab4-11df-86ab-c80aa9429456
--source include/master-slave.inc

--echo ############################################################
--echo # 1. Execute some transactions on server 1.
--connection server1

--let $gcs_number_of_nodes= 2
--source include/rpl_gcs_wait_for_number_of_nodes.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo # 2. Force error on before_commit listener on the next
--echo #    transactions.
--connection server1
SET @debug_saved= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,gcs_force_error_on_before_commit_listener';

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Run function 'before_commit' in plugin 'gcs_replication_plugin' failed");
SET SESSION sql_log_bin= 1;

--echo
--echo ############################################################
--echo # 3. These transactions must be aborted.
--connection server1
BEGIN;
INSERT INTO t1 VALUES (2);
--error ER_ERROR_DURING_COMMIT
COMMIT;

--error ER_ERROR_DURING_COMMIT
INSERT INTO t1 VALUES (3);

--echo
--echo ############################################################
--echo # 4. Clean debug flag.
--echo #    Next commit must succeed.
SET @@GLOBAL.DEBUG= @debug_saved;

INSERT INTO t1 VALUES (4);

--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo # 5. Data validation on server 1.
--connection server1
--let $assert_text= 'There is a value 1 in table t1 on server 1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc
--let $assert_text= 'There is no value 2 in table t1 on server 1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is no value 3 in table t1 on server 1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is a value 4 in table t1 on server 1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 4, count, 1] = 1
--source include/assert.inc

--let $transaction_in_queue= query_get_value(SELECT Transactions_in_queue FROM performance_schema.replication_node_status, Transactions_in_queue, 1)
--let $assert_text= 'The value of Transactions_in_queue should be 0 on server 1'
--let $assert_cond= $transaction_in_queue = 0
--source include/assert.inc
--let $certified_transactions= query_get_value(SELECT Certified_transactions FROM performance_schema.replication_node_status, Certified_transactions, 1)
--let $assert_text= 'The value of Certified_transactions should be 3 on server 1'
--let $assert_cond= $certified_transactions = 3
--source include/assert.inc
--let $positively_certified= query_get_value(SELECT Positively_certified FROM performance_schema.replication_node_status, Positively_certified, 1)
--let $assert_text= 'The value of Positively_certified should be 3 on server 1'
--let $assert_cond= $positively_certified = 3
--source include/assert.inc
--let $negatively_certified= query_get_value(SELECT Negatively_certified FROM performance_schema.replication_node_status, Negatively_certified, 1)
--let $assert_text= 'The value of Negatively_certified should be 0 on server 1'
--let $assert_cond= $negatively_certified = 0
--source include/assert.inc
--let $last_certified_transaction= query_get_value(SELECT Last_certified_transaction from performance_schema.replication_node_status, Last_certified_transaction, 1)
--let $assert_text= 'The value of Last_certified_transaction should be 8a94f357-aab4-11df-86ab-c80aa9429456:3 on server 1'
--let $assert_cond= "$last_certified_transaction" = "$gcs_group_name:3"
--source include/assert.inc

--echo
--echo ############################################################
--echo # 6. Data validation on server 2.
--connection server2
--let $assert_text= 'There is a value 1 in table t1 on server 2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc
--let $assert_text= 'There is no value 2 in table t1 on server 2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is no value 3 in table t1 on server 2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is a value 4 in table t1 on server 2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 4, count, 1] = 1
--source include/assert.inc

--let $transaction_in_queue= query_get_value(SELECT Transactions_in_queue FROM performance_schema.replication_node_status, Transactions_in_queue, 1)
--let $assert_text= 'The value of Transactions_in_queue should be 0 on server 2'
--let $assert_cond= $transaction_in_queue = 0
--source include/assert.inc
--let $certified_transactions= query_get_value(SELECT Certified_transactions FROM performance_schema.replication_node_status, Certified_transactions, 1)
--let $assert_text= 'The value of Certified_transactions should be 3 on server 2'
--let $assert_cond= $certified_transactions = 3
--source include/assert.inc
--let $positively_certified= query_get_value(SELECT Positively_certified FROM performance_schema.replication_node_status, Positively_certified, 1)
--let $assert_text= 'The value of Positively_certified should be 3 on server 2'
--let $assert_cond= $positively_certified = 3
--source include/assert.inc
--let $negatively_certified= query_get_value(SELECT Negatively_certified FROM performance_schema.replication_node_status, Negatively_certified, 1)
--let $assert_text= 'The value of Negatively_certified should be 0 on server 2'
--let $assert_cond= $negatively_certified = 0
--source include/assert.inc
--let $last_certified_transaction= query_get_value(SELECT Last_certified_transaction from performance_schema.replication_node_status, Last_certified_transaction, 1)
--let $assert_text= 'The value of Last_certified_transaction should be 8a94f357-aab4-11df-86ab-c80aa9429456:3 on server 2'
--let $assert_cond= "$last_certified_transaction" = "$gcs_group_name:3"
--source include/assert.inc

--echo
--echo ############################################################
--echo # 7. Shutdown.
--connection server1
DROP TABLE t1;
--source include/rpl_end.inc
