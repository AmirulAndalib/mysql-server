# WL#6841 - GCS Replication: P_S table to show GCS kernel stats

# This test checks the basic functionality of the GCS replication
# P_S for replication_group_members table.
# DDL and DML testing for this table is addressed in other tests.

--source include/have_gcs_replication_plugin.inc

--let $gcs_group_name= 8a84f357-aaa4-10df-85ab-c70aa9429562
--let $gcs_channel_name= group_replication_applier

# This is a valid name being given to the group name
--eval SET GLOBAL gcs_replication_plugin_group_name= "$gcs_group_name"

# Checking the performance Schema output for the replication_group_members table.
--let $channel_name= query_get_value(SELECT Channel_Name from performance_schema.replication_group_members, Channel_Name, 1)
--let $assert_text= The value of channel name should be $gcs_channel_name
--let $assert_cond= "$channel_name" = "$gcs_channel_name"
--source include/assert.inc

--let $member_id= query_get_value(SELECT Member_Id from performance_schema.replication_group_members, Member_Id, 1)
--let $assert_text= The value of member_id should be empty before starting gcs
--let $assert_cond= "$member_id" = ""
--source include/assert.inc

--let $member_address= query_get_value(SELECT Member_Address from performance_schema.replication_group_members, Member_Address, 1)
--let $assert_text= The value of member_address should be empty before starting gcs
--let $assert_cond= "$member_address" = ""
--source include/assert.inc

--let $member_state= query_get_value(SELECT Member_State from performance_schema.replication_group_members, Member_State, 1)
--let $assert_text= The value of member_state should be offline before starting gcs
--let $assert_cond= "$member_state" = "OFFLINE"
--source include/assert.inc

# Start GCS replication
--source include/start_gcs_replication.inc

--let $channel_name= query_get_value(SELECT Channel_Name from performance_schema.replication_group_members, Channel_Name, 1)
--let $assert_text= The value of channel name should be $gcs_channel_name
--let $assert_cond= "$channel_name" = "$gcs_channel_name"
--source include/assert.inc

--let $server_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $member_id= query_get_value(SELECT Member_Id from performance_schema.replication_group_members, Member_Id, 1)
--let $assert_text= The value of member_id should be equal to server uuid after starting gcs
--let $assert_cond= "$member_id" = "$server_uuid"
--source include/assert.inc

--let $member_address= query_get_value(SELECT Member_Address from performance_schema.replication_group_members, Member_Address, 1)
--let $assert_text= The value of member_address should not be empty after starting gcs
--let $assert_cond= "$member_address" != ""
--source include/assert.inc

--let $member_state= query_get_value(SELECT Member_State from performance_schema.replication_group_members, Member_State, 1)
--let $assert_text= The value of member_state should be online after starting gcs
--let $assert_cond= "$member_state" = "ONLINE"
--source include/assert.inc

# Stop GCS replication
--source include/stop_gcs_replication.inc

--let $channel_name= query_get_value(SELECT Channel_Name from performance_schema.replication_group_members, Channel_Name, 1)
--let $assert_text= The value of channel name should be $gcs_channel_name
--let $assert_cond= "$channel_name" = "$gcs_channel_name"
--source include/assert.inc

--let $member_state= query_get_value(SELECT Member_State from performance_schema.replication_group_members, Member_State, 1)
--let $assert_text= The value of member_state should be offline after stoping gcs
--let $assert_cond= "$member_state" = "OFFLINE"
--source include/assert.inc

# This restart tests that the plugin is still loaded on the server restart
--source include/restart_mysqld.inc

--let $member_state= query_get_value(SELECT Member_State from performance_schema.replication_group_members, Member_State, 1)
--let $assert_text= The value of member_state should be offline after restarting server
--let $assert_cond= "$member_state" = "OFFLINE"
--source include/assert.inc
